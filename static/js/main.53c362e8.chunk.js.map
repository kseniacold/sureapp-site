{"version":3,"sources":["HNHeader/HNHeader.js","types/index.js","packery.js","Story/Story.js","services/hn-api.js","actions.js","StoryContainer/StoryContainer.js","Stories/Stories.js","Loader/Loader.js","config.js","StoriesContainer/StoriesContainer.js","HackerNews/HackerNews.js","Message/Message.js","BookmarkedStoriesContainer/BookmarkedStoriesContainer.js","Bookmarks/Bookmarks.js","reducers.js","App/App.js","serviceWorker.js","index.js","HNHeader/heart-nav.svg","Story/heart.svg","Story/heart-selected.svg"],"names":["HNHeader","_ref","top100isSelected","react_default","a","createElement","className","Link","to","src","heartIcon","alt","shape","by","string","isRequired","descendants","number","id","kids","arrayOf","score","time","title","type","url","isBookmarked","bool","pck","init","packery","gridItems","document","querySelectorAll","draggies","i","length","draggie","Draggabilly","push","bindDraggabillyEvents","getPackery","elem","querySelector","Packery","itemSelector","gutter","percentPosition","Story","story","this","props","bookmark","unbookmark","target","rel","href","onClick","heartSelected","heart","Component","hnApi","loadStories","axios","get","then","response","data","loadStory","storyId","SET_STORIES","SET_BOOKMARKS","BOOKMARK_STORY","UN_BOOKMARK_STORY","StoryContainer","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","_isMounted","unsubscribe","store","subscribe","state","_story","_getStoryWithIsBookmarked","setState","storyObj","_storyId","_isBookmarked","getState","bookmarkedStories","indexOf","assign","dispatch","bookmarkStory","unBookmarkStory","_this2","catch","err","console","error","message","src_Story_Story","Stories","_store","storiesItems","stories","map","src_StoryContainer_StoryContainer","key","Loader","CircularProgress_default","color","config","maxStories","StoriesContainer","MAX_STORIES","constructor","Array","slice","storiesIds","src_Stories_Stories","src_Loader_Loader","HackerNews","src_HNHeader_HNHeader","src_StoriesContainer_StoriesContainer","Message","actionText","actionUrl","BookmarkedStoriesContainer","checkedStorage","src_Message_Message","Bookmarks","src_BookmarkedStoriesContainer_BookmarkedStoriesContainer","storiesReducer","arguments","undefined","action","from","bookmarkReducer","bookmarkedStoriesIds","concat","index","hackerNewsApp","STORE","createStore","App","localForage","setItem","_app","getItem","value","HashRouter","Route","path","exact","render","src_HackerNews_HackerNews","src_Bookmarks_Bookmarks","Boolean","window","location","hostname","match","ReactDOM","src_App_App","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.53c362e8.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\n\nimport './HNHeader.css';\nimport heartIcon from './heart-nav.svg';\n\n\nconst HNHeader = ({top100isSelected}) => (\n  <div className=\"HNHeader\">\n    <Link to=\"/\">\n      <div className=\"HNHeader__logo\">\n          <div className=\"HNHeader__logo-text\">\n            HN Reader\n          </div>\n      </div>\n    </Link>\n    <nav className=\"HNHeader__nav\">\n      <Link className={ top100isSelected ? \"HNHeader__nav-link HNHeader__nav-link_selected\" : \"HNHeader__nav-link\" }   to=\"/\">Top 100</Link>\n      <Link className={ top100isSelected ? \"HNHeader__nav-link\" : \"HNHeader__nav-link HNHeader__nav-link_selected\" } to=\"/my-bookmarks\">\n        <img className=\"HNHeader__nav-icon\" src={heartIcon} alt=\"\" /> My Bookmarks\n      </Link>\n    </nav>\n   \n  </div>\n);\n\nHNHeader.propTypes = {\n  top100isSelected: PropTypes.bool.isRequired\n};\n\nexport default HNHeader;","// types/index.js\nimport { shape, number, string, arrayOf, bool } from 'prop-types';\n\nexport const storyType = shape({\n  by: string.isRequired,\n  descendants: number,\n  id: number.isRequired,\n  kids: arrayOf(number),\n  score: number.isRequired,\n  time: number.isRequired,\n  title: string.isRequired,\n  type: string.isRequired,\n  url: string,\n  isBookmarked: bool.isRequired\n});","import Packery from 'packery';\nimport Draggabilly from 'draggabilly';\n\n/**\n * pck Object literal has 2 methods\n * init() initializes draggable layout with provided packery object\n * \n * getPackery() return a packery object iwth \".Stories\" as grid \n * and \".Story\" as item\n */\nconst pck = {\n  init: (packery) => {    \n    let gridItems = document.querySelectorAll('.Story');\n    // array of Draggabillies\n    let draggies = []\n    // init Draggabillies\n    for ( let i = 0; i < gridItems.length; i++ ) {\n      var draggie = new Draggabilly(gridItems[i]);\n      draggies.push(draggie);\n      packery.bindDraggabillyEvents(draggie);\n    }    \n  },\n\n  getPackery: () => {\n    let elem = document.querySelector('.Stories');\n    return new Packery( elem, {\n      // options\n      itemSelector: '.Story',\n      gutter: 20,\n      percentPosition: true\n    });\n  }\n\n};\n\nexport default pck;\n\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { storyType } from '../types/index';\n\nimport './Story.css';\nimport heart from './heart.svg';\nimport heartSelected from './heart-selected.svg';\nimport pck from '../packery';\n\nclass Story extends Component {\n\n  componentDidMount() {\n    // Initialize packery\n    pck.init(pck.getPackery());\n  }\n\n  render() {\n    let story = this.props.story;\n    let bookmark = this.props.bookmark;\n    let unbookmark = this.props.unbookmark;\n\n    return (\n      <div className={story.isBookmarked ? \"Story Story_bkmarked\" : \"Story\"}  >\n        <h3 className= \"Story__heading\">\n          { typeof story.url !== \"undefined\" ?\n            (<a target=\"_blank\" rel=\"noopener noreferrer\" className=\"Story__haeding-link\" href={story.url}>{story.title}</a>) :\n            (<p className=\"Story__haeding-text\">{story.title}</p>)\n          }\n        </h3>\n        <div className=\"Story__score\">Score: <span className=\"Story__detail\">{story.score}</span></div>\n        <div className=\"Story__author\">By: <span className=\"Story__detail\">{story.by}</span></div>\n        <button \n          className=\"Story__button\" \n          onClick={ !story.isBookmarked ?\n                    () => {bookmark(story.id)} :\n                    () => {unbookmark(story.id)}\n                  }>\n          <img \n            className={story.isBookmarked ? \"Story__heart Story__heart_bkmarked\" : \"Story__heart\"}  \n            alt=\"\" \n            src={ story.isBookmarked ?\n              heartSelected :\n              heart\n            } />\n        </button>\n    </div>\n    );\n  }\n}\n\nStory.propTypes = {\n  bookmark: PropTypes.func.isRequired,\n  unbookmark: PropTypes.func.isRequired,\n  story: storyType.isRequired\n};\n\n\nexport default Story;","import axios from 'axios';\n\nconst top500StopriesUrl = \"https://hacker-news.firebaseio.com/v0/topstories.json\";\nconst storyUrl = \"https://hacker-news.firebaseio.com/v0/item/\"; // will need to append story id and \".json\"\n\nconst hnApi = {\n  loadStories: () => {\n    return axios.get(top500StopriesUrl).then(response => response.data);\n  },\n\n  loadStory: (storyId) => {\n    return axios.get(storyUrl + storyId + \".json\").then(response => response.data);\n  }\n};\n\nexport default hnApi;","/*\n * Actions Types\n */\nexport const SET_STORIES = \"SET_STORIES\";\nexport const SET_BOOKMARKS = \"SET_BOOKMARKS\";\n\nexport const BOOKMARK_STORY = \"BOOKMARK_STORY\";\nexport const UN_BOOKMARK_STORY = \"UN_BOOKMARK_STORY\";\n\n/*\n * Actions Creators\n */\n\nexport function setStories(storiesIds) {\n  return { \n    type: SET_STORIES, \n    storiesIds \n  };\n}\n\nexport function setBookmarks(bookmarkedStoriesIds) {\n  return { \n    type: SET_BOOKMARKS, \n    bookmarkedStoriesIds\n  };\n}\n\nexport function bookmarkStory(storyId) {\n  return { \n    type: BOOKMARK_STORY, \n    storyId\n  };\n}\n\nexport function unBookmarkStory(storyId) {\n  return { \n    type: UN_BOOKMARK_STORY, \n    storyId\n  };\n}","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport Story from '../Story/Story';\n\nimport hnApi from '../services/hn-api';\n\nimport {\n  bookmarkStory,\n  unBookmarkStory\n} from '../actions';\n\nclass StoryContainer extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      story: null,\n    };\n  }\n\n  // track state to prevent change state on unmouted component\n  _isMounted = false;\n\n  /**\n   * Upddates component state every time the Store gets updated\n   * subscribe() returns a function for unregistering the listener\\\n   * keep the handle to call when component unmounts\n   * \n   * Here we subscribe to listen to when someone bookmarks the story\n   * The story must be not null at that point hence the check\n   */\n  unsubscribe = this.props.store.subscribe(() => {    \n    if (this.state.story) {\n      let _story = this._getStoryWithIsBookmarked(this.state.story);\n      this.setState({\n        story: _story\n      }); \n    }\n  });\n  \n  componentDidMount() {\n    this._isMounted = true;\n\n    // Fetch Story from the HN API\n      hnApi.loadStory(this.props.storyId).then(data => { \n        if (this._isMounted) {\n          let _story = this._getStoryWithIsBookmarked(data);\n          this.setState({story: _story });\n        }\n      }).catch(function(err) {\n        console.error(\"Failed to fetch story from the API:\", err.message);\n      });\n  }\n\n  /**\n   * Enhaces a story object with isBookmarked property\n   * By returning a new object containing the original storyObj\n   * with isBookmarked field\n   */\n  _getStoryWithIsBookmarked = (storyObj) => {\n    let _storyId = this.props.storyId;\n    let _isBookmarked = this.props.store.getState().bookmarkedStories.indexOf(_storyId) !== -1;\n\n    return Object.assign({}, storyObj, {isBookmarked: _isBookmarked});\n  }\n\n  bookmark = (storyId) => {\n    this.props.store.dispatch(bookmarkStory(storyId));\n  };\n\n  unbookmark = (storyId) => {\n    this.props.store.dispatch(unBookmarkStory(storyId));\n  };\n\n  componentWillUnmount() {\n    this._isMounted = false;\n    this.unsubscribe();\n  }\n\n  render() {\n    return ( this.state.story ?\n      <Story story={this.state.story} bookmark={this.bookmark} unbookmark={this.unbookmark} /> :\n      <div className=\"loading\"></div>\n    );\n  }\n}\n\nStoryContainer.propTypes = {\n  storyId: PropTypes.number.isRequired,\n  store: PropTypes.object.isRequired\n};\n\nexport default StoryContainer;","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport StoryContainer from '../StoryContainer/StoryContainer';\n\nimport './Stories.css';\n\nclass Stories extends Component {\n  render() {\n    const _store = this.props.store;\n    const storiesItems = this.props.stories.map((storyId) => \n          <StoryContainer key={storyId} storyId={storyId} store={_store}/>\n      );\n    return ( \n      <div className=\"Stories\">\n        {storiesItems}\n      </div>\n    );\n  }\n}\n\nStories.propTypes = {\n  stories: PropTypes.arrayOf(PropTypes.number).isRequired,\n  store: PropTypes.object.isRequired\n};\n\nexport default Stories;","import React from 'react';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nimport './Loader.css';\n\nconst Loader = () => (\n  <div className=\"Loader__wrapper\"><CircularProgress className=\"Loader\" color=\"primary\" /></div>\n);\n\nexport default Loader;","const config = {\n  maxStories: 100\n};\n\nexport default config;","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport Stories from '../Stories/Stories';\nimport Loader from '../Loader/Loader';\n\nimport config from '../config';\nimport hnApi from '../services/hn-api';\n\nimport {\n  setStories\n} from '../actions';\n\nclass StoriesContainer extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      stories: null\n    };\n  }\n\n  MAX_STORIES = config.maxStories;\n\n  // Upddate component state every time the Store gets updated \n  // subscribe() returns a function for unregistering the listener\n  // keep the handler to call when component unmount\n  unsubscribe = this.props.store.subscribe(() => {\n    this.setState({\n      stories: this.props.store.getState().stories\n    });\n  });\n\n  componentDidMount() {\n    this._isMounted = true;\n    \n    if (!this.state.stories || this.state.stories.length === 0) {\n      \n      // Get data from Hacaker News API\n      hnApi.loadStories().then(stories => {\n\n        if (stories && stories.constructor === Array) {\n          if (stories.length > this.MAX_STORIES) {\n            stories = stories.slice(0, this.MAX_STORIES);\n          }\n\n          this.props.store.dispatch(setStories(stories));\n        }\n      }).catch(function(err) {\n        console.error(\"Failed to fetch stories from the API:\", err.message);\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    this.unsubscribe();\n  }\n\n  render() {\n    return ( this.state.stories ?\n      <Stories stories={this.state.stories} store={this.props.store}/> :\n      <Loader />\n    );\n  }\n}\n\nStoriesContainer.propTypes = {\n  store: PropTypes.object.isRequired\n};\n\nexport default StoriesContainer;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport HNHeader from '../HNHeader/HNHeader';\nimport StoriesContainer from '../StoriesContainer/StoriesContainer';\n\nconst HackerNews = ({store}) => (\n  <div className=\"HackerNews\">\n    <HNHeader top100isSelected={true} />\n    <StoriesContainer store={store} />\n  </div>\n);\n\nHackerNews.propTypes = {\n  store: PropTypes.object.isRequired\n};\n\nexport default HackerNews;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport './Message.css';\n\nconst Message = ({message, actionText, actionUrl}) => (\n  <div className=\"Message__wrapper\">\n    <div className=\"Message\">{message}</div>\n    { actionText && actionUrl ?\n      <Link className=\"Message__cta\" to={actionUrl}>{actionText}</Link> :\n      \"\"\n    }\n  </div>\n);\n\nMessage.propTypes = {\n  message: PropTypes.string.isRequired,\n  actionText: PropTypes.string,\n  actionUrl: PropTypes.string\n};\n\nexport default Message;","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport Stories from '../Stories/Stories';\nimport Loader from '../Loader/Loader';\nimport Message from '../Message/Message';\n\nclass BookmarkedStoriesContainer extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      stories: null\n    };\n  }\n\n  componentDidMount() { \n    // stories are null - let's get them from the Store\n    if (!this.state.stories) {\n      this.setState({\n        stories: this.props.store.getState().bookmarkedStories\n      });\n    }\n  }\n\n  // Upddate component state every time the Store gets updated \n  // subscribe() returns a function for unregistering the listener\n  // keep the handler to call when component unmounts\n  unsubscribe = this.props.store.subscribe(() => {\n    this.setState({\n      stories: this.props.store.getState().bookmarkedStories\n    });\n  });\n\n  componentWillUnmount() {\n    this.unsubscribe();\n  }\n\n  render() {\n    let message = \"You don't have any bookmarked stories.\";\n    let actionText = \"Start Bookmarking\";\n    let actionUrl = \"/\";\n\n    if (!this.state.stories || !this.props.checkedStorage) {\n      return <Loader />;\n\n    } else if (this.state.stories.constructor === Array && this.state.stories.length === 0) { // There is no bookmarked stories\n      return <Message message={message} actionText={actionText} actionUrl={actionUrl}/>;\n\n    }\n\n    return (<Stories stories={this.state.stories} store={this.props.store}/>);\n  }\n}\n\nBookmarkedStoriesContainer.propTypes = {\n  store: PropTypes.object.isRequired,\n  checkedStorage: PropTypes.bool.isRequired\n};\n\nexport default BookmarkedStoriesContainer;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport HNHeader from '../HNHeader/HNHeader';\nimport BookmarkedStoriesContainer from '../BookmarkedStoriesContainer/BookmarkedStoriesContainer';\n\nconst Bookmarks = ({store, checkedStorage}) => (\n  <div className=\"Bookmarks\">\n    <HNHeader top100isSelected={false} />\n    <BookmarkedStoriesContainer store={store} checkedStorage={checkedStorage} />\n  </div>\n);\n\nBookmarks.propTypes = {\n  store: PropTypes.object.isRequired\n};\n\nexport default Bookmarks;","import { SET_STORIES, BOOKMARK_STORY, UN_BOOKMARK_STORY, SET_BOOKMARKS  } from \"./actions\";\n// import { combineReducers } from 'redux';\n\n/**\n * Returns new application state of stories by provided action\n * Defaults to an empty [] of stories\n * @param {*} state \n * @param {*} action \n */\nfunction storiesReducer(state = [], action) {\n  if (typeof action === 'undefined') {\n    return state;\n  }\n  \n  switch (action.type) {\n    case SET_STORIES:\n      return Array.from(action.storiesIds);\n    default:\n      return state;\n  }\n}\n\n\n/**\n * Returns a new state of bookmarkedStories\n * By provided action\n * @param {*} state \n * @param {*} action \n */\nfunction bookmarkReducer(state = [], action) {\n  if (typeof action === 'undefined') {\n    return state;\n  }\n\n  switch (action.type) {\n    case SET_BOOKMARKS:\n      if (state.length === 0) { // no bookmarks so far\n        return Array.from(action.bookmarkedStoriesIds);\n      } else {\n        return state.concat(action.bookmarkedStoriesIds);\n      }\n    \n    case BOOKMARK_STORY: \n      return state.concat([action.storyId]);\n    \n    case UN_BOOKMARK_STORY: \n      let index = state.indexOf(action.storyId);\n      // there is no story to remove, will just return current state\n      if (index === -1) {\n        return state;\n      } else {\n        let _bookmarkedStories = state\n          .slice(0, index)\n          .concat(state.slice(index + 1));\n        return _bookmarkedStories;\n      }\n\n    default:\n      return state;\n  }\n\n}\n\n// Combine reducers\nconst hackerNewsApp = function (state = {}, action) {\n  return {\n    stories: storiesReducer(state.stories, action),\n    bookmarkedStories: bookmarkReducer(state.bookmarkedStories, action)\n  }\n}\n\nexport default hackerNewsApp;\n","import React, { Component } from 'react';\nimport HackerNews from '../HackerNews/HackerNews';\nimport Bookmarks from '../Bookmarks/Bookmarks';\nimport { HashRouter as Router, Route} from 'react-router-dom';\n\nimport { createStore } from 'redux';\nimport hackerNewsApp from '../reducers';\n\n// Local Sotrage library to keep the State persistant between sessions\nimport localForage from \"localforage\";\n\nimport {\n  setBookmarks\n} from '../actions';\n\n// Create Redux Store of our application\nconst STORE = createStore(hackerNewsApp);\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      checkedStorage: false\n    };\n  }\n\n  // track state to prevent change state on unmouted component\n  _isMounted = false;\n\n  componentDidMount() {\n    let _app = this;\n    _app._isMounted = true;\n    \n    // Get bookmarks from the local storage\n    localForage.getItem('hn-reader-bookmarks').then(function(value) {\n      if (_app._isMounted) {\n        _app.setState({\n          checkedStorage: true\n        });\n      }\n\n      // Dispatch action to update app Store\n      if (value && value.constructor === Array) {\n        STORE.dispatch(setBookmarks(value));\n      }\n\n    }).catch(function(err) {\n      console.error(\"Failed to load bookmarks from the local storage:\", err.message);\n    });\n  }\n\n  // subscribe() returns a function for unregistering the listener\n  // keep the handle to call when component unmounts\n  unsubscribe = STORE.subscribe(() => {\n    // Update Local storage\n    localForage.setItem('hn-reader-bookmarks', STORE.getState().bookmarkedStories)\n      .catch(function (err) {\n        console.error(\"Failed to save bookmarks in local storage:\", err.message);\n      });\n  });\n\n  componentWillUnmount() {\n    this._isMounted = false;\n    this.unsubscribe();\n  }\n\n  render() {\n    return (\n        <Router>\n           <div className=\"App\">\n              <Route \n                path=\"/\" exact \n                render={(props) => <HackerNews {...props} store={STORE} />}\n              />\n               <Route \n                path=\"/my-bookmarks\" exact \n                render={(props) => <Bookmarks {...props} store={STORE} checkedStorage={this.state.checkedStorage}/>}\n              />            \n            </div>   \n        </Router>\n    );\n  } \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();","module.exports = __webpack_public_path__ + \"static/media/heart-nav.2906f172.svg\";","module.exports = __webpack_public_path__ + \"static/media/heart.ab763bdb.svg\";","module.exports = __webpack_public_path__ + \"static/media/heart-selected.f947355e.svg\";"],"sourceRoot":""}